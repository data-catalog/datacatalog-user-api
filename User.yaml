openapi: 3.0.0
info:
  title: User
  version: '1.0'
  description: Data Catalog User API.
  contact:
    name: Kata SÃ¡ra Cseke
    email: katacseke@gmail.com
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: Unique identifier for user
    get:
      summary: Your GET endpoint
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: definitions/UserResponse.yaml
              examples:
                example-1:
                  value:
                    id: '0'
                    email: example@mail.com
                    firstName: Jane
                    lastName: Doe
                    username: User1
        '404':
          description: User not found
      operationId: getUser
      description: Get user by ID
    delete:
      summary: ''
      operationId: deleteUser
      responses:
        '204':
          description: User deleted
      description: Delete a specific user
      tags:
        - User
  /users:
    get:
      summary: Your GET endpoint
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./definitions/UserResponse.yaml
              examples:
                example-1:
                  value:
                    - id: string
                      email: example@mail.com
                      firstName: Jane
                      lastName: Doe
                      username: User1
                      role: user
      operationId: getUsers
      description: Get all users.
    post:
      summary: ''
      operationId: createUser
      responses:
        '201':
          description: New user created.
        '422':
          description: Unprocessable entity.
      description: Create new user (registration).
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/UserRequest.yaml
            examples:
              example:
                value:
                  email: example@mail.com
                  firstName: Jane
                  lastName: Doe
                  username: User1
                  password: password1234
        description: User information for registration.
      tags:
        - User
  /users/login:
    post:
      summary: ''
      operationId: login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./definitions/UserLoginResponse.yaml
              examples:
                example:
                  value:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0ODUxNDA5ODQsImlhdCI6MTQ4NTEzNzM4NCwiaXNzIjoiYWNtZS5jb20iLCJzdWIiOiIyOWFjMGMxOC0wYjRhLTQyY2YtODJmYy0wM2Q1NzAzMThhMWQiLCJhcHBsaWNhdGlvbklkIjoiNzkxMDM3MzQtOTdhYi00ZDFhLWFmMzctZTAwNmQwNWQyOTUyIiwic
                    user:
                      id: string
                      email: example@mail.com
                      firstName: Jane
                      lastName: Doe
                      username: User1
                      role: user
        '401':
          description: Authentication failed. The username or password is not correct.
      description: Log user into the system.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/UserLoginRequest.yaml
            examples:
              example-1:
                value:
                  username: username1
                  password: password123
      tags:
        - User
  /token_info:
    post:
      summary: ''
      operationId: tokenInfo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./definitions/TokenInfoResponse.yaml
              examples: {}
      description: It provides information about the token.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: The token.
        description: Contains the token.
      tags:
        - User
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authentication is made by the JWT token sent in the Authorizationheader of the request.
tags:
  - name: Asset
  - name: User
