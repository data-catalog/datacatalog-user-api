openapi: 3.0.0
info:
  title: Data Catalog User Service API
  version: '1.0'
  description: |-
    The user handling service of the Data Catalog application.

    Provides API endpoints to register, and log in to the application. 
    It communicates with other services to tell informations about tokens, thus authorizing a request made at another service.
    Provides endpoints to delete, and list users for administrative purposes.

    The api supports JWT token, and API key authentication.
  contact:
    name: Szilárd Tumó
    email: szilard.tumo@stud.ubbcluj.ro
servers:
  - url: 'https://userhandlingservice.azurewebsites.net'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: The ID of the user.
    get:
      summary: Get a User
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: definitions/UserResponse.yaml
              examples: {}
        '404':
          description: Not Found
      operationId: getUser
      description: Returns the user which ID corresponds to the ID provided.
    delete:
      summary: Delete a User
      operationId: deleteUser
      responses:
        '204':
          description: User deleted
        '404':
          description: Not Found
      description: |-
        Delete the user which ID corresponds to the ID provided.

        Requires authentication and *ADMIN* rights to perform the deletion.

        A response with status code of `204` with empty resonse body indicates that the deletion was successful.
      tags:
        - User
      security:
        - JWT: []
        - ApiKey: []
    patch:
      summary: Update User by ID
      operationId: updateUser
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: ./definitions/ErrorResponse.yaml
      description: |-
        Update the user which ID corresponds to the ID provided.

        Only the attributes specified in the HTTP body will be modified. The attributes which are not specified will **not** change.

        The role of the user CANNOT be updated using this endpoint. The username CANNOT be updated at all.

        Possible response codes:
         - `204`: The update was successful.
         - `404`: There is no user found with the provided ID.
         - `422`: The object provided in the request body is malformed. A detailed explanation can be found in the response body. The user will not be updated.
      security:
        - JWT: []
        - ApiKey: []
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/UserUpdateRequest.yaml
  /users:
    get:
      summary: Get all Users
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./definitions/UserResponse.yaml
              examples: {}
      operationId: getUsers
      description: Lists all the users.
    post:
      summary: Create a User
      operationId: createUser
      responses:
        '201':
          description: Created
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: ./definitions/ErrorResponse.yaml
      description: Create new user (registration).
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/UserCreationRequest.yaml
            examples: {}
        description: User information for registration.
      tags:
        - User
  /users/login:
    post:
      summary: Log In
      operationId: login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./definitions/UserLoginResponse.yaml
              examples: {}
        '401':
          description: Authentication failed. The username or password is not correct.
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: ./definitions/ErrorResponse.yaml
      description: Log in with a username and password.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/UserLoginRequest.yaml
            examples: {}
      tags:
        - Authentication
  /token_info:
    post:
      summary: Token Introspection
      operationId: tokenInfo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./definitions/TokenInfoResponse.yaml
              examples: {}
        '422':
          description: Unprocessable Entity (WebDAV)
      description: |-
        It provides information about the token.

        Primarily used by other services of the application, to confirm the token's authenticity.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/TokenInfoRequest.yaml
        description: ''
      tags:
        - Authentication
  /user/keys:
    get:
      summary: Get the API Keys of the Authenticated User
      tags:
        - ApiKey
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./definitions/ApiKeyResponse.yaml
      operationId: getUserApiKeys
      description: |-
        Lists the API keys for the authenticated user. For security reasons, it only returns the name and ID, not the key itself.

        Requires authentication.
      security:
        - JWT: []
    post:
      summary: Create an API Key for the Authenticated User
      operationId: createUserApiKey
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./definitions/ApiKeyCreationResponse.yaml
        '422':
          description: Unprocessable Entity (WebDAV)
      description: |-
        Generates a new API key for the authenticated user.

        Requires authentication.
         
        The key will be returned only with this request. It cannot be viewed again.
      tags:
        - ApiKey
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/ApiKeyCreationRequest.yaml
  '/user/keys/{keyId}':
    parameters:
      - schema:
          type: string
        name: keyId
        in: path
        required: true
        description: The ID of the API key.
    get:
      summary: Get an API Key
      tags:
        - ApiKey
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./definitions/ApiKeyResponse.yaml
        '404':
          description: Not Found
      operationId: getUserApiKey
      description: 'View a single API key of the authenticated user. For security reasons, it only returns the name and ID, not the key itself.'
      security:
        - JWT: []
        - ApiKey: []
    delete:
      summary: Delete an API Key
      operationId: deleteUserApiKey
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      description: Removes an API key from the authenticated user.
      security:
        - JWT: []
        - ApiKey: []
      tags:
        - ApiKey
  /users/show_many:
    get:
      summary: Get Many Users by ID
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./definitions/UserResponse.yaml
      operationId: getManyUsersById
      parameters:
        - schema:
            type: array
            items:
              type: string
            uniqueItems: true
          in: query
          name: ids
          description: A comma separated list of IDs to query.
          required: true
          style: form
      description: Returns all of the users with the specified IDs.
    parameters: []
  '/users/username/{username}':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
        description: The username of the user.
    get:
      summary: Get User by Username
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./definitions/UserResponse.yaml
        '404':
          description: Not Found
      operationId: getUserByUsername
      description: Returns the user with the specified username.
  '/users/search/{searchTerm}':
    parameters:
      - schema:
          type: string
          default: ''
        name: searchTerm
        in: path
        required: true
        description: The search term.
    get:
      summary: Search Users by Username
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./definitions/UserResponse.yaml
      operationId: searchUsers
      description: Returns the users which usernames contain the searchTerm.
  '/users/{userId}/role':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: The ID of the user.
    put:
      summary: Modify User Role by ID
      operationId: modifyUserRole
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: ./definitions/ErrorResponse.yaml
      tags:
        - User
      description: |-
        Modifies the user's role.

        Requires authentication and *ADMIN* rights.
      security:
        - JWT: []
        - ApiKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/UserRoleUpdateRequest.yaml
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: Bearer <token>
      description: Authentication is made by the JWT token sent in the Authorization header of the request.
    ApiKey:
      name: Authorization
      type: apiKey
      in: header
      description: 'Authentication is made by the API key sent in the Authorization header of the request, in the following format: `Bearer <api_key>`.'
tags:
  - name: ApiKey
    x-displayName: API Key Management
  - name: Authentication
    x-displayName: Authentication
  - name: User
    x-displayName: User
